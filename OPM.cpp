/**
 *
 *  Copyright (C) 2018 Roman Pauer
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of
 *  this software and associated documentation files (the "Software"), to deal in
 *  the Software without restriction, including without limitation the rights to
 *  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 *  of the Software, and to permit persons to whom the Software is furnished to do
 *  so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 */

#include "BASEMEM.h"
#include "ERROR.h"
#include "OPM.h"

typedef struct {
    const char *text;
    int data1;
    int data2;
} OPM_ErrorStruct;

unsigned char OPM_Font16pt[4096] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x66, 0xC3, 0x81, 0xE7, 0x24, 0x24, 0x24, 0x3C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x3C, 0x24, 0x24, 0x24, 0xE7, 0x81, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x30, 0x38, 0x2C, 0xE6, 0x83, 0x83, 0xE6, 0x2C, 0x38, 0x30, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x0C, 0x1C, 0x34, 0x67, 0xC1, 0xC1, 0x67, 0x34, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0x38, 0xBA, 0x92, 0xD6, 0xC6, 0xD6, 0x92, 0xBA, 0x38, 0x7C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xFA, 0xF2, 0xF6, 0xE6, 0xEE, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0xEE, 0xC6, 0xD6, 0x92, 0xBA, 0x38, 0xBA, 0x92, 0xD6, 0xC6, 0xEE, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x8C, 0x8C, 0xD8, 0x58, 0x70, 0x30, 0x20, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x3C, 0x66, 0xC3, 0x91, 0x91, 0x9D, 0x81, 0xC3, 0x66, 0x3C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x7E, 0xFF, 0x10, 0x38, 0x10, 0x00,  /*  */
    0x00, 0x00, 0x08, 0x0E, 0x0F, 0x09, 0x08, 0x08, 0x78, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x78, 0x40, 0x70, 0x40, 0x40, 0x00, 0x1E, 0x10, 0x1C, 0x10, 0x10, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x38, 0x40, 0x40, 0x40, 0x38, 0x00, 0x1C, 0x12, 0x1C, 0x14, 0x12, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x05, 0x05, 0x05, 0x05, 0x0D, 0x0D, 0x1D, 0x39, 0x79, 0x71, 0x71, 0x61, 0x41, 0x00, 0x00,  /*  */
    0x00, 0xA0, 0xA0, 0xA0, 0xA0, 0xB0, 0xB0, 0xB8, 0x9C, 0x9E, 0x8E, 0x8E, 0x86, 0x82, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0x82, 0x00, 0x82, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x02, 0x06, 0x06, 0x06, 0x02, 0x00, 0x02, 0x06, 0x06, 0x06, 0x02, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x3A, 0x7C, 0xB8, 0xC0, 0xC0, 0xC0, 0xB8, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x3A, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x3A, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x82, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x02, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xB8, 0xC0, 0xC0, 0xC0, 0xB8, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x3A, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xB8, 0xC0, 0xC0, 0xC0, 0xB8, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0x82, 0x00, 0x02, 0x06, 0x06, 0x06, 0x02, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C, 0x3A, 0x06, 0x06, 0x06, 0x3A, 0x7C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7E, 0x06, 0x06, 0x7E, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x78, 0x40, 0x70, 0x40, 0x78, 0x00, 0x0E, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x18, 0x18, 0x10, 0x1E, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xEC, 0x04, 0x04, 0x04, 0x3C, 0x00,  /*  */
    0x11, 0x0B, 0x0D, 0x06, 0x07, 0x2E, 0x39, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x04, 0x28, 0xD8, 0x28, 0xD0, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* Space */
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,  /* ! */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* " */
    0x00, 0x00, 0x66, 0x66, 0xFF, 0xFF, 0x66, 0x66, 0xFF, 0xFF, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  /* # */
    0x18, 0x18, 0x3E, 0x7E, 0x60, 0x60, 0x7C, 0x3E, 0x06, 0x06, 0x7E, 0x7C, 0x18, 0x18, 0x00, 0x00,  /* $ */
    0x00, 0x00, 0x66, 0x66, 0x6C, 0x0C, 0x18, 0x18, 0x30, 0x36, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  /* % */
    0x38, 0x7C, 0x6C, 0x6C, 0x38, 0x38, 0x70, 0x70, 0xDE, 0xDE, 0xCC, 0xCC, 0xFE, 0x76, 0x00, 0x00,  /* & */
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ' */
    0x00, 0x00, 0x06, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x06, 0x00, 0x00,  /* ( */
    0x00, 0x00, 0x60, 0x30, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x30, 0x60, 0x00, 0x00,  /* ) */
    0x00, 0x00, 0x66, 0x66, 0x3C, 0x3C, 0xFF, 0xFF, 0x3C, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  /* * */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,  /* + */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x30, 0x00,  /* , */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* - */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /* . */
    0x00, 0x00, 0x06, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0x00, 0x00,  /* / */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* 0 */
    0x00, 0x00, 0x18, 0x18, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00, 0x00,  /* 1 */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x7E, 0x7E, 0x00, 0x00,  /* 2 */
    0x00, 0x00, 0x7E, 0x7E, 0x0C, 0x0C, 0x18, 0x18, 0x0C, 0x0C, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* 3 */
    0x00, 0x00, 0x0C, 0x0C, 0x1C, 0x1C, 0x3C, 0x3C, 0x6C, 0x6C, 0x7E, 0x7E, 0x0C, 0x0C, 0x00, 0x00,  /* 4 */
    0x00, 0x00, 0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7E, 0x06, 0x06, 0x06, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* 5 */
    0x00, 0x00, 0x1C, 0x3C, 0x70, 0x60, 0x60, 0x7C, 0x7E, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* 6 */
    0x00, 0x00, 0x7E, 0x7E, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00,  /* 7 */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x3C, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* 8 */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x06, 0x06, 0x06, 0x0E, 0x3C, 0x38, 0x00, 0x00,  /* 9 */
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /* : */
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x30, 0x00,  /* ; */
    0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x00, 0x00, 0x00, 0x00,  /* < */
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* = */
    0x00, 0x00, 0x00, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x00,  /* > */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00,  /* ? */
    0x00, 0x00, 0x38, 0x7C, 0xE6, 0xC2, 0xDA, 0xD6, 0xD6, 0xDC, 0xC0, 0xE2, 0x7E, 0x3C, 0x00, 0x00,  /* @ */
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /* A */
    0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x7E, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7C, 0x00, 0x00,  /* B */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* C */
    0x00, 0x00, 0x78, 0x7C, 0x6E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x7C, 0x78, 0x00, 0x00,  /* D */
    0x00, 0x00, 0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E, 0x00, 0x00,  /* E */
    0x00, 0x00, 0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00,  /* F */
    0x00, 0x00, 0x3E, 0x7E, 0x60, 0x60, 0x6E, 0x6E, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* G */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /* H */
    0x00, 0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00, 0x00,  /* I */
    0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* J */
    0x00, 0x00, 0xCC, 0xCC, 0xD8, 0xD8, 0xF0, 0xF0, 0xD8, 0xD8, 0xCC, 0xCC, 0xC6, 0xC6, 0x00, 0x00,  /* K */
    0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E, 0x00, 0x00,  /* L */
    0x00, 0x00, 0xC6, 0xC6, 0xEE, 0xEE, 0xFE, 0xD6, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00,  /* M */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x76, 0x76, 0x7E, 0x7E, 0x6E, 0x6E, 0x66, 0x66, 0x66, 0x00, 0x00,  /* N */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* O */
    0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00,  /* P */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6A, 0x7C, 0x36, 0x00, 0x00,  /* Q */
    0x00, 0x00, 0xF8, 0xFC, 0xCC, 0xCC, 0xCC, 0xFC, 0xF8, 0xD8, 0xCC, 0xCC, 0xC6, 0xC6, 0x00, 0x00,  /* R */
    0x00, 0x00, 0x3E, 0x7E, 0x60, 0x60, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x06, 0x7E, 0x7C, 0x00, 0x00,  /* S */
    0x00, 0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /* T */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* U */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x00,  /* V */
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0xFE, 0xEE, 0xC6, 0x82, 0x00, 0x00,  /* W */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x3C, 0x3C, 0x66, 0x66, 0x66, 0x00, 0x00,  /* X */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /* Y */
    0x00, 0x00, 0x7E, 0x7E, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x7E, 0x7E, 0x00, 0x00,  /* Z */
    0x00, 0x00, 0x1E, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x1E, 0x00, 0x00,  /* [ */
    0x00, 0x00, 0x60, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x78, 0x00, 0x00,  /* ] */
    0x00, 0x10, 0x10, 0x38, 0x38, 0x6C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,  /*  */
    0x40, 0x60, 0x70, 0x38, 0x1C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /* a */
    0x00, 0x00, 0x60, 0x60, 0x60, 0x7C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7C, 0x00, 0x00,  /* b */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /* c */
    0x00, 0x00, 0x06, 0x06, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /* d */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /* e */
    0x00, 0x00, 0x0E, 0x1E, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /* f */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x06, 0x7E, 0x00,  /* g */
    0x00, 0x00, 0x60, 0x60, 0x60, 0x7C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /* h */
    0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /* i */
    0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7C, 0x00,  /* j */
    0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xCC, 0xDC, 0xF8, 0xF0, 0xF8, 0xD8, 0xCC, 0xCE, 0xC6, 0x00, 0x00,  /* k */
    0x00, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /* l */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xD6, 0xD6, 0xD6, 0xC6, 0xC6, 0xC6, 0x00, 0x00,  /* m */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /* n */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /* o */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7C, 0x60, 0x00,  /* p */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x06, 0x00,  /* q */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7E, 0x66, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00,  /* r */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7E, 0x60, 0x70, 0x3C, 0x0E, 0x06, 0x7E, 0x7C, 0x00, 0x00,  /* s */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x0E, 0x00, 0x00,  /* t */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /* u */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x00,  /* v */
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0xFE, 0xEE, 0xC6, 0x82, 0x00, 0x00,  /* w */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x3C, 0x3C, 0x66, 0x66, 0x00, 0x00,  /* x */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x06, 0x7E, 0x00,  /* y */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x7E, 0x7E, 0x00, 0x00,  /* z */
    0x00, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x38, 0xF0, 0xF0, 0x38, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00,  /* { */
    0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,  /* | */
    0x00, 0xE0, 0x30, 0x30, 0x30, 0x30, 0x38, 0x1E, 0x1E, 0x38, 0x30, 0x30, 0x30, 0x30, 0xE0, 0x00,  /* } */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xF2, 0xBE, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ~ */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x3C, 0x24, 0x66, 0x42, 0xC3, 0xFF, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x7E, 0x3C, 0x0C, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x30, 0x18, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x1C, 0x36, 0x1C, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x3E, 0x0C, 0x00,  /*  */
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x30, 0x18, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x60, 0x60, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x66, 0x66, 0x18, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x3C, 0x66, 0x3C, 0x18, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x06, 0x0C, 0x18, 0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7C, 0x60, 0x60, 0x60, 0x7E, 0x7E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x7F, 0x1B, 0x7B, 0xFF, 0xD8, 0xD8, 0xFF, 0x7F, 0x00, 0x00,  /*  */
    0x00, 0x3E, 0x7E, 0xF8, 0xD8, 0xD8, 0xDE, 0xDE, 0xF8, 0xF8, 0xD8, 0xD8, 0xDE, 0xDE, 0x00, 0x00,  /*  */
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x30, 0x18, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x06, 0x7E, 0x00,  /*  */
    0x00, 0x66, 0x66, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x18, 0x18, 0x3C, 0x7E, 0x66, 0x60, 0x60, 0x66, 0x7E, 0x3C, 0x18, 0x18, 0x00, 0x00,  /*  */
    0x00, 0x0E, 0x1E, 0x38, 0x30, 0x30, 0x30, 0x30, 0xFE, 0x30, 0x30, 0x30, 0x7F, 0xFF, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x60, 0x40, 0x00,  /*  */
    0x00, 0x00, 0x0E, 0x1E, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x70, 0x60, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x32, 0x7A, 0x4C, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x00, 0x32, 0x7A, 0x4C, 0x00, 0x66, 0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x7E, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x7E, 0x00,  /*  */
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x30, 0x30, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x60, 0x60, 0x60, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x06, 0x06, 0x06, 0x00, 0x00,  /*  */
    0x00, 0x60, 0x20, 0x20, 0x23, 0x26, 0x2C, 0x18, 0x30, 0x6E, 0xD3, 0x06, 0x0C, 0x18, 0x1F, 0x00,  /*  */
    0x00, 0x60, 0x20, 0x20, 0x23, 0x26, 0x2C, 0x18, 0x32, 0x66, 0xCE, 0x1A, 0x32, 0x3F, 0x02, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x1A, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0xB0, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x32, 0x7A, 0x4C, 0x00, 0x3C, 0x3E, 0x06, 0x3E, 0x7E, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x32, 0x7A, 0x4C, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x01, 0x3D, 0x7E, 0x66, 0x66, 0x6E, 0x6E, 0x76, 0x76, 0x66, 0x66, 0x7E, 0xBC, 0x80, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x01, 0x3D, 0x7E, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x7E, 0xBC, 0x80, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xDB, 0xDF, 0xD8, 0xD8, 0xFF, 0x7F, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0xFE, 0xD8, 0xD8, 0xDE, 0xDE, 0xD8, 0xD8, 0xD8, 0xD8, 0xFE, 0x7E, 0x00, 0x00,  /*  */
    0x60, 0x30, 0x18, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x32, 0x7A, 0x4C, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,  /*  */
    0x32, 0x7A, 0x4C, 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x00, 0x00,  /*  */
    0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7A, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0x7A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0xC6, 0x82, 0xBA, 0xA2, 0xA2, 0xA2, 0xBA, 0x82, 0xC6, 0x7C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0xC6, 0x82, 0xBA, 0xAA, 0xB2, 0xBA, 0xAA, 0x82, 0xC6, 0x7C, 0x00, 0x00, 0x00,  /*  */
    0xF1, 0x5B, 0x5F, 0x55, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x66, 0x66, 0x00, 0xE6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x0E, 0x3C, 0x00,  /*  */
    0xF6, 0xF6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0xF6, 0x0E, 0x7C, 0x00,  /*  */
    0x00, 0x00, 0x66, 0x76, 0x76, 0x3E, 0x3C, 0x3C, 0x6E, 0x6E, 0x66, 0x62, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0x7C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x1E, 0x1E, 0x06, 0x06, 0x0E, 0x1E, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x06, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x1E, 0x1E, 0x04, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x6E, 0x6E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x3C, 0x3C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x3C, 0x3E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x60, 0x60, 0x7E, 0x7E, 0x06, 0x06, 0x06, 0x0E, 0x1C, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x6C, 0x6E, 0x3E, 0x36, 0x66, 0x66, 0x66, 0x6E, 0x6E, 0x6E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x1C, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x66, 0x66, 0x76, 0x76, 0x06, 0x7E, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x6E, 0x6E, 0x66, 0x36, 0x3E, 0x18, 0x1C, 0x0E, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x06, 0x06, 0x36, 0x36, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xF6, 0xF6, 0xC6, 0xC6, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xE6, 0xE6, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x3E, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3E, 0x3E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7E, 0x7E, 0x66, 0x66, 0x76, 0x76, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x6E, 0x6E, 0x66, 0x76, 0x3E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x1C, 0x36, 0x32, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x4C, 0x6C, 0x38, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x38, 0x38, 0x6C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x66, 0xF7, 0x99, 0x99, 0xEF, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x62, 0xF6, 0xDC, 0x88, 0x88, 0xDC, 0xF6, 0x62, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x60, 0x40, 0x00,  /*  */
    0x00, 0x00, 0xFE, 0x7E, 0x62, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x02, 0x7E, 0xFC, 0xA8, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0xFE, 0xFE, 0x60, 0x30, 0x18, 0x0C, 0x0C, 0x18, 0x30, 0x60, 0xFE, 0xFE, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x1E, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7F, 0x5D, 0xC0, 0x80, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x02, 0x7E, 0xFC, 0x90, 0x30, 0x30, 0x30, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x7C, 0x10, 0x10, 0x7C, 0xC6, 0x82, 0x82, 0x82, 0x82, 0xC6, 0x7C, 0x10, 0x10, 0x7C, 0x00,  /*  */
    0x00, 0x00, 0x3C, 0x7E, 0x66, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x66, 0x7E, 0x3C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x28, 0xAA, 0xEE, 0x6C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x1E, 0x3E, 0x20, 0x30, 0x18, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x7E, 0x3C, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x0E, 0x1E, 0x10, 0x7C, 0xD6, 0x92, 0x92, 0x92, 0x92, 0xD6, 0x7C, 0x10, 0xF0, 0xE0, 0x00,  /*  */
    0x00, 0x00, 0x10, 0x10, 0x7C, 0xD6, 0x92, 0x92, 0x92, 0x92, 0xD6, 0x7C, 0x10, 0x10, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x3E, 0x7E, 0xE0, 0xC0, 0xC0, 0xFC, 0xFC, 0xC0, 0xC0, 0xE0, 0x7E, 0x3E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x7C, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x7E, 0x7E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x60, 0x70, 0x38, 0x1C, 0x0E, 0x1C, 0x38, 0x70, 0x60, 0x00, 0x7E, 0x7E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x06, 0x0E, 0x1C, 0x38, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x00, 0x7E, 0x7E, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x0E, 0x19, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,  /*  */
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x98, 0x70, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x02, 0x3E, 0x7C, 0x40, 0x02, 0x3E, 0x7C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x38, 0x6C, 0x44, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x10, 0xD0, 0xD0, 0x50, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x30, 0x78, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x30, 0x48, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0x00, 0x78, 0x18, 0x30, 0x18, 0x48, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /*  */
    0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char OPM_Font8pt[2048] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x18, 0x3C, 0x66, 0xC3, 0xE7, 0x24, 0x24, 0x3C, /*  */
    0x3C, 0x24, 0x24, 0xE7, 0xC3, 0x66, 0x3C, 0x18, /*  */
    0x18, 0x1C, 0xF6, 0x83, 0x83, 0xF6, 0x1C, 0x18, /*  */
    0x18, 0x38, 0x6F, 0xC1, 0xC1, 0x6F, 0x38, 0x18, /*  */
    0x3C, 0x99, 0xC3, 0xE7, 0xC3, 0x99, 0x3C, 0x00, /*  */
    0xFF, 0xFF, 0xFE, 0xFC, 0xF9, 0xF3, 0xE7, 0x00, /*  */
    0xE7, 0xC3, 0x99, 0x3C, 0x99, 0xC3, 0xE7, 0x00, /*  */
    0x01, 0x03, 0x06, 0x8C, 0xD8, 0x70, 0x20, 0x00, /*  */
    0x7E, 0xC3, 0xD3, 0xD3, 0xDB, 0xC3, 0xC3, 0x7E, /*  */
    0x18, 0x3C, 0x3C, 0x3C, 0x7E, 0x10, 0x38, 0x10, /*  */
    0x18, 0x1C, 0x16, 0x10, 0x10, 0x70, 0xF0, 0x60, /*  */
    0xF0, 0xC0, 0xFE, 0xD8, 0xDE, 0x18, 0x18, 0x00, /*  */
    0xF0, 0xC0, 0xDF, 0xDB, 0xFF, 0x1E, 0x1B, 0x00, /*  */
    0x05, 0x05, 0x05, 0x0D, 0x0D, 0x19, 0x79, 0x71, /*  */
    0xA0, 0xA0, 0xA0, 0xB0, 0xB0, 0x98, 0x9E, 0x8E, /*  */
    0x7C, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0x7C, 0x00, /*  */
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, /*  */
    0x7C, 0x06, 0x06, 0x7C, 0xC0, 0xC0, 0x7C, 0x00, /*  */
    0x7C, 0x06, 0x06, 0x7C, 0x06, 0x06, 0x7C, 0x00, /*  */
    0xC6, 0xC6, 0xC6, 0x7C, 0x06, 0x06, 0x06, 0x00, /*  */
    0x7C, 0xC0, 0xC0, 0x7C, 0x06, 0x06, 0x7C, 0x00, /*  */
    0x7C, 0xC0, 0xC0, 0x7C, 0xC6, 0xC6, 0x7C, 0x00, /*  */
    0x7C, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, /*  */
    0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00, /*  */
    0x7C, 0xC6, 0xC6, 0x7C, 0x06, 0x06, 0x7C, 0x00, /*  */
    0x00, 0x00, 0x3C, 0x06, 0x7E, 0x66, 0x3C, 0x00, /*  */
    0x78, 0x60, 0x78, 0x60, 0x7E, 0x18, 0x1E, 0x00, /*  */
    0x07, 0x0F, 0x1F, 0x18, 0x18, 0x10, 0x1E, 0x17, /*  */
    0xF0, 0xF8, 0xEC, 0x04, 0x04, 0x04, 0x3C, 0x54, /*  */
    0x11, 0x0B, 0x0D, 0x06, 0x07, 0x2E, 0x39, 0x38, /*  */
    0x04, 0x28, 0xD8, 0x28, 0xD0, 0x10, 0xE0, 0x00, /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Space */
    0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, /* ! */
    0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, /* " */
    0x00, 0x6C, 0xFE, 0x6C, 0x6C, 0xFE, 0x6C, 0x00, /* # */
    0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00, /* $ */
    0x00, 0x66, 0x6C, 0x18, 0x30, 0x66, 0x46, 0x00, /* % */
    0x38, 0x6C, 0x38, 0x70, 0xDE, 0xCC, 0x76, 0x00, /* & */
    0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, /* ' */
    0x0E, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0E, 0x00, /* ( */
    0x70, 0x38, 0x18, 0x18, 0x18, 0x38, 0x70, 0x00, /* ) */
    0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, /* * */
    0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, /* + */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, /* , */
    0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, /* - */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, /* . */
    0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00, /* / */
    0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00, /* 0 */
    0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, /* 1 */
    0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x7E, 0x00, /* 2 */
    0x7E, 0x0C, 0x18, 0x0C, 0x06, 0x66, 0x3C, 0x00, /* 3 */
    0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00, /* 4 */
    0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00, /* 5 */
    0x3C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00, /* 6 */
    0x7E, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00, /* 7 */
    0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00, /* 8 */
    0x3C, 0x66, 0x66, 0x3E, 0x06, 0x0C, 0x38, 0x00, /* 9 */
    0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, /* : */
    0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00, /* ; */
    0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00, /* < */
    0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, /* = */
    0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, /* > */
    0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00, /* ? */
    0x3C, 0x66, 0x6E, 0x6A, 0x6E, 0x60, 0x3E, 0x00, /* @ */
    0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00, /* A */
    0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00, /* B */
    0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00, /* C */
    0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00, /* D */
    0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00, /* E */
    0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00, /* F */
    0x3E, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3E, 0x00, /* G */
    0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, /* H */
    0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, /* I */
    0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x3C, 0x00, /* J */
    0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00, /* K */
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, /* L */
    0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0x00, /* M */
    0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00, /* N */
    0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, /* O */
    0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, /* P */
    0x3C, 0x66, 0x66, 0x66, 0x76, 0x6C, 0x36, 0x00, /* Q */
    0x7C, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x00, /* R */
    0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00, /* S */
    0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, /* T */
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, /* U */
    0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, /* V */
    0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00, /* W */
    0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00, /* X */
    0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00, /* Y */
    0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00, /* Z */
    0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00, /* [ */
    0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, /*  */
    0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, /* ] */
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, /*  */
    0x00, 0xC0, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, /*  */
    0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, /* a */
    0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00, /* b */
    0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00, /* c */
    0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00, /* d */
    0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, /* e */
    0x1C, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x30, 0x00, /* f */
    0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C, /* g */
    0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, /* h */
    0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, /* i */
    0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x70, /* j */
    0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00, /* k */
    0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, /* l */
    0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xC6, 0xC6, 0x00, /* m */
    0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, /* n */
    0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, /* o */
    0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, /* p */
    0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x06, /* q */
    0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00, /* r */
    0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00, /* s */
    0x00, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x0E, 0x00, /* t */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, /* u */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, /* v */
    0x00, 0x00, 0xC6, 0xC6, 0xD6, 0x7C, 0x6C, 0x00, /* w */
    0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, /* x */
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x7C, /* y */
    0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00, /* z */
    0x0E, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0E, 0x00, /* { */
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, /* | */
    0x70, 0x18, 0x18, 0x0C, 0x18, 0x18, 0x70, 0x00, /* } */
    0x00, 0x60, 0xF2, 0x9E, 0x0C, 0x00, 0x00, 0x00, /* ~ */
    0x00, 0x18, 0x18, 0x34, 0x34, 0x62, 0x7E, 0x00, /*  */
    0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x08, 0x38, /*  */
    0x66, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, /*  */
    0x0C, 0x18, 0x00, 0x3C, 0x7E, 0x60, 0x3C, 0x00, /*  */
    0x18, 0x66, 0x00, 0x3C, 0x06, 0x7E, 0x3E, 0x00, /*  */
    0x66, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, /*  */
    0x30, 0x18, 0x00, 0x3C, 0x06, 0x7E, 0x3E, 0x00, /*  */
    0x18, 0x18, 0x00, 0x3C, 0x06, 0x7E, 0x3E, 0x00, /*  */
    0x00, 0x00, 0x3C, 0x60, 0x60, 0x3C, 0x08, 0x18, /*  */
    0x18, 0x66, 0x00, 0x3C, 0x7E, 0x60, 0x3C, 0x00, /*  */
    0x66, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, /*  */
    0x30, 0x18, 0x00, 0x3C, 0x7E, 0x60, 0x3C, 0x00, /*  */
    0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00, /*  */
    0x18, 0x66, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00, /*  */
    0x60, 0x30, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00, /*  */
    0x66, 0x00, 0x18, 0x3C, 0x66, 0x7E, 0x66, 0x00, /*  */
    0x18, 0x00, 0x18, 0x3C, 0x66, 0x7E, 0x66, 0x00, /*  */
    0x0C, 0x18, 0x7E, 0x60, 0x7C, 0x60, 0x7E, 0x00, /*  */
    0x00, 0x00, 0x7E, 0x1B, 0x7F, 0xD8, 0x7E, 0x00, /*  */
    0x3F, 0x78, 0xD8, 0xDE, 0xF8, 0xD8, 0xDF, 0x00, /*  */
    0x18, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x66, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x30, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x18, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, /*  */
    0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, /*  */
    0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x7C, /*  */
    0x66, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, /*  */
    0x18, 0x18, 0x3C, 0x60, 0x60, 0x3C, 0x18, 0x18, /*  */
    0x1C, 0x3A, 0x30, 0x7C, 0x30, 0x30, 0x7E, 0x00, /*  */
    0x66, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x18, 0x00, /*  */
    0x1C, 0x36, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x60, /*  */
    0x1E, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x60, 0x00, /*  */
    0x0C, 0x18, 0x00, 0x3C, 0x06, 0x7E, 0x3E, 0x00, /*  */
    0x0C, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00, /*  */
    0x0C, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x0C, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, /*  */
    0x34, 0x58, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x00, /*  */
    0x34, 0x58, 0x00, 0x66, 0x76, 0x6E, 0x66, 0x00, /*  */
    0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x3C, /*  */
    0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x3C, /*  */
    0x00, 0x18, 0x00, 0x18, 0x30, 0x60, 0x66, 0x3C, /*  */
    0x00, 0x00, 0x00, 0x3E, 0x30, 0x30, 0x30, 0x00, /*  */
    0x00, 0x00, 0x00, 0x7C, 0x0C, 0x0C, 0x0C, 0x00, /*  */
    0xC6, 0xCC, 0xD8, 0x36, 0x6B, 0xC3, 0x86, 0x0F, /*  */
    0xC6, 0xCC, 0xD8, 0x36, 0x6E, 0xD6, 0x9F, 0x06, /*  */
    0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, /*  */
    0x1B, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x1B, 0x00, /*  */
    0xD8, 0x6C, 0x36, 0x1B, 0x36, 0x6C, 0xD8, 0x00, /*  */
    0x34, 0x58, 0x00, 0x3C, 0x06, 0x7E, 0x3E, 0x00, /*  */
    0x34, 0x58, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x02, 0x3C, 0x66, 0x6E, 0x76, 0x66, 0x3C, 0x40, /*  */
    0x00, 0x02, 0x3C, 0x6E, 0x76, 0x66, 0x3C, 0x40, /*  */
    0x00, 0x00, 0x7E, 0xDB, 0xDF, 0xD8, 0x7E, 0x00, /*  */
    0x7F, 0xD8, 0xD8, 0xDE, 0xD8, 0xD8, 0x7F, 0x00, /*  */
    0x30, 0x18, 0x00, 0x18, 0x3C, 0x66, 0x7E, 0x66, /*  */
    0x34, 0x58, 0x00, 0x18, 0x3C, 0x66, 0x7E, 0x66, /*  */
    0x34, 0x58, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, /*  */
    0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x00, 0x10, 0x38, 0x10, 0x10, 0x10, 0x00, 0x00, /*  */
    0x7A, 0xCA, 0xCA, 0xCA, 0x7A, 0x0A, 0x0A, 0x0A, /*  */
    0x7E, 0xC3, 0xBD, 0xB1, 0xB1, 0xBD, 0xC3, 0x7E, /*  */
    0x7E, 0xC3, 0xBD, 0xA5, 0xB9, 0xAD, 0xC3, 0x7E, /*  */
    0xF1, 0x5B, 0x5F, 0x55, 0x51, 0x00, 0x00, 0x00, /*  */
    0x66, 0x00, 0xE6, 0x66, 0x66, 0xF6, 0x06, 0x1C, /*  */
    0xF6, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x06, 0x1C, /*  */
    0x00, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x00, 0x00, /*  */
    0x00, 0x7C, 0x0C, 0x0C, 0x0C, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x1E, 0x06, 0x0E, 0x1E, 0x36, 0x00, 0x00, /*  */
    0x00, 0x7E, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, /*  */
    0x00, 0x7C, 0x06, 0x66, 0x66, 0x66, 0x00, 0x00, /*  */
    0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, /*  */
    0x00, 0x1E, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, /*  */
    0x00, 0x7E, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, /*  */
    0x60, 0x6E, 0x66, 0x66, 0x66, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x3C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, /*  */
    0x00, 0x3E, 0x06, 0x06, 0x06, 0x3E, 0x00, 0x00, /*  */
    0x60, 0x7E, 0x06, 0x06, 0x06, 0x0E, 0x00, 0x00, /*  */
    0x00, 0x6C, 0x3E, 0x66, 0x66, 0x6E, 0x00, 0x00, /*  */
    0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, /*  */
    0x00, 0x3E, 0x36, 0x36, 0x36, 0x1C, 0x00, 0x00, /*  */
    0x00, 0x36, 0x36, 0x36, 0x36, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x7E, 0x66, 0x76, 0x06, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x66, 0x66, 0x3C, 0x0E, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x3E, 0x06, 0x36, 0x36, 0x34, 0x30, 0x00, /*  */
    0x00, 0x78, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, /*  */
    0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x00, 0x00, /*  */
    0x00, 0x7C, 0x6C, 0x6C, 0x6C, 0xEC, 0x00, 0x00, /*  */
    0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, /*  */
    0x00, 0x3E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, /*  */
    0x00, 0xFE, 0x66, 0x66, 0x66, 0x7E, 0x00, 0x00, /*  */
    0x00, 0x7E, 0x66, 0x76, 0x06, 0x06, 0x06, 0x00, /*  */
    0x00, 0x36, 0x36, 0x1C, 0x0C, 0x0C, 0x0C, 0x00, /*  */
    0x0E, 0x1B, 0x3C, 0x66, 0x66, 0x3C, 0xD8, 0x70, /*  */
    0x00, 0x10, 0x38, 0x6C, 0xC6, 0x82, 0x00, 0x00, /*  */
    0x66, 0xF7, 0x99, 0x99, 0xEF, 0x66, 0x00, 0x00, /*  */
    0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00, /*  */
    0x1C, 0x36, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x60, /*  */
    0x00, 0xFE, 0x66, 0x62, 0x60, 0x60, 0x60, 0xF8, /*  */
    0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x48, /*  */
    0xFE, 0x66, 0x30, 0x18, 0x30, 0x66, 0xFE, 0x00, /*  */
    0x00, 0x1E, 0x38, 0x6C, 0x6C, 0x6C, 0x38, 0x00, /*  */
    0x00, 0x00, 0x6C, 0x6C, 0x6C, 0x6C, 0x7F, 0xC0, /*  */
    0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x10, /*  */
    0x3C, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x3C, /*  */
    0x00, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x3C, 0x00, /*  */
    0x00, 0x3C, 0x66, 0x66, 0x66, 0x24, 0x66, 0x00, /*  */
    0x1C, 0x36, 0x78, 0xDC, 0xCC, 0xEC, 0x78, 0x00, /*  */
    0x0C, 0x18, 0x38, 0x54, 0x54, 0x38, 0x30, 0x60, /*  */
    0x00, 0x10, 0x7C, 0xD6, 0xD6, 0xD6, 0x7C, 0x10, /*  */
    0x3E, 0x70, 0x60, 0x7E, 0x60, 0x70, 0x3E, 0x00, /*  */
    0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, /*  */
    0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, /*  */
    0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00, /*  */
    0x30, 0x18, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, /*  */
    0x0C, 0x18, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, /*  */
    0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, /*  */
    0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70, 0x00, /*  */
    0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, /*  */
    0x00, 0x32, 0x4C, 0x00, 0x32, 0x4C, 0x00, 0x00, /*  */
    0x38, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x38, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, /*  */
    0x00, 0x00, 0x0F, 0x18, 0xD8, 0x70, 0x30, 0x00, /*  */
    0x38, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, /*  */
    0x38, 0x6C, 0x18, 0x30, 0x7C, 0x00, 0x00, 0x00, /*  */
    0x78, 0x0C, 0x38, 0x0C, 0x78, 0x00, 0x00, 0x00, /*  */
    0x00, 0xFE, 0x00, 0x00 /*  */
};

unsigned char OPM_Font6pt[1536] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x20, 0x70, 0xD8, 0x20, 0x20, 0x20, /*  */
    0x20, 0x20, 0x20, 0xD8, 0x70, 0x20, /*  */
    0x10, 0x18, 0xEC, 0x18, 0x10, 0x00, /*  */
    0x20, 0x60, 0xDC, 0x60, 0x20, 0x00, /*  */
    0x70, 0xA8, 0xD8, 0xA8, 0x70, 0x00, /*  */
    0xF8, 0xF0, 0xE0, 0xC8, 0x98, 0x00, /*  */
    0xD8, 0xA8, 0x70, 0xA8, 0xD8, 0x00, /*  */
    0x0C, 0x18, 0xB0, 0xE0, 0x40, 0x00, /*  */
    0x78, 0x84, 0xA4, 0xB4, 0x84, 0x78, /*  */
    0x30, 0x78, 0x78, 0xFC, 0x00, 0x30, /*  */
    0x10, 0x18, 0x10, 0x70, 0xF0, 0x60, /*  */
    0xE0, 0x80, 0xDC, 0x90, 0x18, 0x10, /*  */
    0xE0, 0x80, 0xB8, 0xE8, 0x38, 0x2C, /*  */
    0x14, 0x14, 0x14, 0x34, 0x74, 0x64, /*  */
    0x40, 0x40, 0x40, 0x60, 0x70, 0x30, /*  */
    0xF8, 0xC8, 0xC8, 0xD8, 0xD8, 0xF8, /*  */
    0x60, 0x20, 0x20, 0x70, 0x70, 0x70, /*  */
    0x78, 0x08, 0xF8, 0xC0, 0xC0, 0xF8, /*  */
    0xF0, 0x10, 0xF8, 0x18, 0x18, 0xF8, /*  */
    0xC0, 0xC0, 0xC0, 0xD8, 0xF8, 0x18, /*  */
    0xF0, 0x80, 0xF8, 0x18, 0x18, 0xF8, /*  */
    0xC0, 0xC0, 0xF8, 0x98, 0xD8, 0xF8, /*  */
    0xF8, 0x08, 0x38, 0x30, 0x30, 0x30, /*  */
    0x70, 0x50, 0x70, 0xD8, 0xD8, 0xF8, /*  */
    0xF8, 0xD8, 0xC8, 0xF8, 0x18, 0x18, /*  */
    0x00, 0x70, 0x08, 0xF8, 0x70, 0x00, /*  */
    0xE0, 0x80, 0xDC, 0x90, 0xF0, 0x1C, /*  */
    0x1C, 0x3C, 0x60, 0x40, 0x70, 0x58, /*  */
    0xE0, 0xD0, 0x18, 0x08, 0x78, 0x28, /*  */
    0x44, 0x2C, 0x28, 0x14, 0xEC, 0xC0, /*  */
    0x08, 0xD0, 0x50, 0xA0, 0xC0, 0x00, /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Space */
    0x30, 0x30, 0x30, 0x30, 0x00, 0x30, /* ! */
    0xD8, 0xD8, 0x90, 0x00, 0x00, 0x00, /* " */
    0x50, 0xF8, 0x50, 0xF8, 0x50, 0x00, /* # */
    0x78, 0xA0, 0x70, 0x28, 0xF0, 0x20, /* $ */
    0xC8, 0xD0, 0x20, 0x58, 0x98, 0x00, /* % */
    0x60, 0xD0, 0x60, 0xE8, 0xD0, 0x68, /* & */
    0x30, 0x30, 0x60, 0x00, 0x00, 0x00, /* ' */
    0x30, 0x60, 0x60, 0x60, 0x30, 0x00, /* ( */
    0x60, 0x30, 0x30, 0x30, 0x60, 0x00, /* ) */
    0x48, 0x30, 0x78, 0x30, 0x48, 0x00, /* * */
    0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, /* + */
    0x00, 0x00, 0x00, 0x30, 0x30, 0x60, /* , */
    0x00, 0x00, 0x78, 0x00, 0x00, 0x00, /* - */
    0x00, 0x00, 0x00, 0x30, 0x30, 0x00, /* . */
    0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, /* / */
    0x70, 0x98, 0xA8, 0xC8, 0x70, 0x00, /* 0 */
    0x10, 0x30, 0x10, 0x10, 0x10, 0x00, /* 1 */
    0xF0, 0x08, 0x70, 0x80, 0xF8, 0x00, /* 2 */
    0xF0, 0x08, 0x70, 0x08, 0xF0, 0x00, /* 3 */
    0x30, 0x50, 0x90, 0xF8, 0x10, 0x00, /* 4 */
    0xF0, 0x80, 0xF0, 0x08, 0xF0, 0x00, /* 5 */
    0x70, 0x80, 0xF0, 0x88, 0x70, 0x00, /* 6 */
    0xF8, 0x08, 0x10, 0x20, 0x20, 0x00, /* 7 */
    0x70, 0x88, 0x70, 0x88, 0x70, 0x00, /* 8 */
    0x70, 0x88, 0x78, 0x08, 0x70, 0x00, /* 9 */
    0x30, 0x30, 0x00, 0x30, 0x30, 0x00, /* : */
    0x30, 0x30, 0x00, 0x30, 0x10, 0x20, /* ; */
    0x18, 0x30, 0x60, 0x30, 0x18, 0x00, /* < */
    0x00, 0x78, 0x00, 0x78, 0x00, 0x00, /* = */
    0x60, 0x30, 0x18, 0x30, 0x60, 0x00, /* > */
    0x70, 0x98, 0x30, 0x30, 0x00, 0x30, /* ? */
    0x70, 0x88, 0xB8, 0xB0, 0x80, 0x78, /* @ */
    0x70, 0x88, 0xF8, 0x88, 0x88, 0x00, /* A */
    0xF0, 0x88, 0xF0, 0x88, 0xF0, 0x00, /* B */
    0x78, 0x80, 0x80, 0x80, 0x78, 0x00, /* C */
    0xF0, 0x88, 0x88, 0x88, 0xF0, 0x00, /* D */
    0xF8, 0x80, 0xF0, 0x80, 0xF8, 0x00, /* E */
    0xF8, 0x80, 0xF0, 0x80, 0x80, 0x00, /* F */
    0x78, 0x80, 0x98, 0x88, 0x78, 0x00, /* G */
    0x88, 0x88, 0xF8, 0x88, 0x88, 0x00, /* H */
    0x70, 0x20, 0x20, 0x20, 0x70, 0x00, /* I */
    0x08, 0x08, 0x08, 0x88, 0x70, 0x00, /* J */
    0x48, 0x50, 0x60, 0x50, 0x48, 0x00, /* K */
    0x40, 0x40, 0x40, 0x40, 0x78, 0x00, /* L */
    0x88, 0xD8, 0xA8, 0x88, 0x88, 0x00, /* M */
    0x88, 0xC8, 0xA8, 0x98, 0x88, 0x00, /* N */
    0x70, 0x88, 0x88, 0x88, 0x70, 0x00, /* O */
    0xF0, 0x88, 0xF0, 0x80, 0x80, 0x00, /* P */
    0x70, 0x88, 0x88, 0x88, 0x70, 0x18, /* Q */
    0xF0, 0x88, 0xF0, 0xA0, 0x98, 0x00, /* R */
    0x78, 0x80, 0x70, 0x08, 0xF0, 0x00, /* S */
    0xF8, 0x20, 0x20, 0x20, 0x20, 0x00, /* T */
    0x88, 0x88, 0x88, 0x88, 0x78, 0x00, /* U */
    0x88, 0x88, 0x88, 0x50, 0x20, 0x00, /* V */
    0x88, 0x88, 0xA8, 0xD8, 0x88, 0x00, /* W */
    0x88, 0x50, 0x20, 0x50, 0x88, 0x00, /* X */
    0x88, 0x88, 0x50, 0x20, 0x20, 0x00, /* Y */
    0xF8, 0x10, 0x20, 0x40, 0xF8, 0x00, /* Z */
    0x78, 0x60, 0x60, 0x60, 0x78, 0x00, /* [ */
    0xC0, 0x60, 0x30, 0x18, 0x08, 0x00, /*  */
    0x78, 0x18, 0x18, 0x18, 0x78, 0x00, /* ] */
    0x20, 0x70, 0xD8, 0x00, 0x00, 0x00, /*  */
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, /*  */
    0x60, 0x60, 0x30, 0x00, 0x00, 0x00, /*  */
    0x00, 0x70, 0x08, 0xF8, 0x78, 0x00, /* a */
    0x80, 0xF0, 0x88, 0x88, 0xF0, 0x00, /* b */
    0x00, 0x70, 0x80, 0x80, 0x70, 0x00, /* c */
    0x08, 0x78, 0x88, 0x88, 0x78, 0x00, /* d */
    0x00, 0x70, 0xF8, 0x80, 0x70, 0x00, /* e */
    0x18, 0x20, 0x78, 0x20, 0x20, 0x00, /* f */
    0x00, 0x78, 0x88, 0x78, 0x08, 0xF0, /* g */
    0x80, 0xB0, 0xC8, 0x88, 0x88, 0x00, /* h */
    0x00, 0x60, 0x20, 0x20, 0x70, 0x00, /* i */
    0x10, 0x10, 0x10, 0x10, 0x10, 0xE0, /* j */
    0x80, 0x90, 0xE0, 0x90, 0x88, 0x00, /* k */
    0x60, 0x20, 0x20, 0x20, 0x70, 0x00, /* l */
    0x00, 0x50, 0xF8, 0xA8, 0x88, 0x00, /* m */
    0x00, 0xF0, 0x88, 0x88, 0x88, 0x00, /* n */
    0x00, 0x70, 0x88, 0x88, 0x70, 0x00, /* o */
    0x00, 0xF0, 0x88, 0x88, 0xF0, 0x80, /* p */
    0x00, 0x78, 0x88, 0x88, 0x78, 0x08, /* q */
    0x00, 0x70, 0x48, 0x40, 0x40, 0x00, /* r */
    0x00, 0x38, 0x60, 0x18, 0x70, 0x00, /* s */
    0x20, 0x70, 0x20, 0x20, 0x10, 0x00, /* t */
    0x00, 0x88, 0x88, 0x88, 0x78, 0x00, /* u */
    0x00, 0x88, 0x88, 0x50, 0x20, 0x00, /* v */
    0x00, 0x88, 0xA8, 0xA8, 0xD8, 0x00, /* w */
    0x00, 0x48, 0x30, 0x30, 0x48, 0x00, /* x */
    0x00, 0x88, 0x88, 0x78, 0x08, 0xF0, /* y */
    0x00, 0x78, 0x10, 0x20, 0x78, 0x00, /* z */
    0x38, 0x30, 0x60, 0x30, 0x38, 0x00, /* { */
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, /* | */
    0x70, 0x30, 0x18, 0x30, 0x70, 0x00, /* } */
    0x40, 0xE8, 0xB8, 0x10, 0x00, 0x00, /* ~ */
    0x00, 0x20, 0x70, 0xC8, 0xF8, 0x00, /*  */
    0x78, 0x80, 0x80, 0x80, 0x78, 0xC0, /*  */
    0x50, 0x00, 0x88, 0x88, 0x88, 0x78, /*  */
    0x10, 0x20, 0x70, 0xF8, 0x80, 0x70, /*  */
    0x20, 0x50, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x50, 0x00, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x40, 0x20, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x20, 0x00, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x00, 0x78, 0x80, 0x80, 0x78, 0xE0, /*  */
    0x20, 0x50, 0x70, 0xF8, 0x80, 0x70, /*  */
    0x50, 0x00, 0x70, 0xF8, 0x80, 0x70, /*  */
    0x40, 0x20, 0x70, 0xF8, 0x80, 0x70, /*  */
    0x50, 0x00, 0x60, 0x20, 0x20, 0x70, /*  */
    0x20, 0x50, 0x20, 0x20, 0x20, 0x70, /*  */
    0x40, 0x20, 0x60, 0x20, 0x20, 0x70, /*  */
    0x50, 0x00, 0x70, 0x88, 0xF8, 0x88, /*  */
    0x20, 0x00, 0x70, 0x88, 0xF8, 0x88, /*  */
    0x20, 0xF8, 0x80, 0xF0, 0x80, 0xF8, /*  */
    0x00, 0xF0, 0x38, 0xE0, 0x78, 0x00, /*  */
    0x78, 0xA0, 0xF8, 0xA0, 0xB8, 0x00, /*  */
    0x20, 0x50, 0x70, 0x88, 0x88, 0x70, /*  */
    0x50, 0x00, 0x70, 0x88, 0x88, 0x70, /*  */
    0x40, 0x20, 0x70, 0x88, 0x88, 0x70, /*  */
    0x20, 0x50, 0x88, 0x88, 0x88, 0x78, /*  */
    0x40, 0x20, 0x88, 0x88, 0x88, 0x78, /*  */
    0x50, 0x00, 0x88, 0x78, 0x08, 0xF0, /*  */
    0x50, 0x00, 0x70, 0x88, 0x88, 0x70, /*  */
    0x50, 0x00, 0x88, 0x88, 0x88, 0x78, /*  */
    0x10, 0x38, 0x60, 0x38, 0x10, 0x00, /*  */
    0x18, 0x20, 0x70, 0x20, 0x78, 0x00, /*  */
    0x88, 0xD8, 0x70, 0x20, 0x70, 0x20, /*  */
    0xF0, 0xD8, 0xF0, 0xD8, 0xF0, 0xC0, /*  */
    0x18, 0x20, 0x78, 0x20, 0x20, 0xC0, /*  */
    0x10, 0x20, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x10, 0x20, 0x60, 0x20, 0x20, 0x70, /*  */
    0x10, 0x20, 0x70, 0x88, 0x88, 0x70, /*  */
    0x10, 0x20, 0x88, 0x88, 0x88, 0x78, /*  */
    0xF0, 0x00, 0xF0, 0x88, 0x88, 0x88, /*  */
    0x78, 0x00, 0x48, 0x68, 0x58, 0x48, /*  */
    0x70, 0x08, 0xF8, 0x78, 0x00, 0xF8, /*  */
    0x70, 0x88, 0x88, 0x70, 0x00, 0xF8, /*  */
    0x60, 0x00, 0x60, 0x60, 0xC8, 0x70, /*  */
    0x00, 0x00, 0x78, 0x40, 0x40, 0x00, /*  */
    0x00, 0x00, 0x78, 0x08, 0x08, 0x00, /*  */
    0xC0, 0xC0, 0xD8, 0x2C, 0x18, 0x3C, /*  */
    0xC0, 0xC0, 0xCC, 0x14, 0x3C, 0x04, /*  */
    0x30, 0x00, 0x30, 0x30, 0x30, 0x30, /*  */
    0x34, 0x6C, 0xD8, 0x6C, 0x34, 0x00, /*  */
    0xB0, 0xD8, 0x6C, 0xD8, 0xB0, 0x00, /*  */
    0x68, 0xB0, 0x70, 0x08, 0xF8, 0x78, /*  */
    0x68, 0xB0, 0x70, 0x88, 0x88, 0x70, /*  */
    0x34, 0x48, 0x58, 0x68, 0x48, 0xB0, /*  */
    0x08, 0x30, 0x58, 0x68, 0x30, 0x40, /*  */
    0x00, 0x70, 0xB8, 0xA0, 0x78, 0x00, /*  */
    0x78, 0xB0, 0xB8, 0xB0, 0x78, 0x00, /*  */
    0x40, 0x20, 0x70, 0x88, 0xF8, 0x88, /*  */
    0x68, 0xB0, 0x70, 0x88, 0xF8, 0x88, /*  */
    0x68, 0xB0, 0x70, 0x88, 0x88, 0x70, /*  */
    0x50, 0x00, 0x00, 0x00, 0x00, 0x00, /*  */
    0x10, 0x20, 0x00, 0x00, 0x00, 0x00, /*  */
    0x20, 0x70, 0x20, 0x20, 0x20, 0x00, /*  */
    0x68, 0xE8, 0xE8, 0x68, 0x28, 0x28, /*  */
    0x78, 0xCC, 0xB4, 0xBC, 0xC4, 0x78, /*  */
    0x78, 0x8C, 0xB4, 0x8C, 0xA4, 0x78, /*  */
    0xF4, 0x5C, 0x54, 0x00, 0x00, 0x00, /*  */
    0x48, 0x00, 0x48, 0x48, 0x48, 0x10, /*  */
    0xE8, 0x48, 0x48, 0xE8, 0x08, 0x30, /*  */
    0x98, 0xD8, 0x70, 0xD8, 0xC8, 0x00, /*  */
    0xF0, 0x30, 0x30, 0x30, 0xF8, 0x00, /*  */
    0x78, 0x08, 0x18, 0x38, 0x68, 0x00, /*  */
    0xFC, 0x18, 0x18, 0x18, 0x18, 0x00, /*  */
    0xF0, 0x18, 0xD8, 0xD8, 0xD8, 0x00, /*  */
    0x70, 0x30, 0x30, 0x30, 0x30, 0x00, /*  */
    0x78, 0x30, 0x18, 0x18, 0x18, 0x00, /*  */
    0xFC, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, /*  */
    0xC0, 0xD8, 0xD8, 0xD8, 0xF8, 0x00, /*  */
    0x78, 0x18, 0x18, 0x00, 0x00, 0x00, /*  */
    0xF0, 0x18, 0x18, 0x18, 0xF0, 0x00, /*  */
    0xC0, 0xF8, 0x18, 0x18, 0x78, 0x00, /*  */
    0xD8, 0x7C, 0x64, 0x64, 0x6C, 0x00, /*  */
    0x38, 0x18, 0x18, 0x18, 0x78, 0x00, /*  */
    0xF8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, /*  */
    0x6C, 0x6C, 0x6C, 0x6C, 0xFC, 0x00, /*  */
    0xF8, 0x98, 0xD8, 0x18, 0xF8, 0x00, /*  */
    0xD8, 0xD8, 0x70, 0x38, 0xF8, 0x00, /*  */
    0xF8, 0x18, 0xD8, 0xD0, 0xC0, 0xC0, /*  */
    0x70, 0x18, 0x18, 0x18, 0x18, 0x00, /*  */
    0xD4, 0xD4, 0xF4, 0xC4, 0xFC, 0x00, /*  */
    0x78, 0x58, 0x58, 0x58, 0xD8, 0x00, /*  */
    0x38, 0x18, 0x18, 0x18, 0x18, 0x00, /*  */
    0xF8, 0x18, 0x18, 0x18, 0x18, 0x00, /*  */
    0x00, 0xFC, 0x6C, 0x6C, 0x7C, 0x00, /*  */
    0xF8, 0x98, 0xD8, 0x18, 0x18, 0x00, /*  */
    0xD8, 0xD8, 0x70, 0x30, 0x30, 0x00, /*  */
    0x30, 0x28, 0x70, 0x70, 0xA0, 0x60, /*  */
    0x00, 0x20, 0x70, 0xD8, 0x88, 0x00, /*  */
    0x00, 0x58, 0xB4, 0xB4, 0x68, 0x00, /*  */
    0x00, 0x68, 0xD0, 0xD0, 0x68, 0x00, /*  */
    0x70, 0xD8, 0xF0, 0xD8, 0xF0, 0xC0, /*  */
    0xFC, 0x6C, 0x64, 0x60, 0x60, 0x60, /*  */
    0x00, 0xF8, 0x50, 0x50, 0x50, 0x00, /*  */
    0xF8, 0x60, 0x30, 0x60, 0xC0, 0xF8, /*  */
    0x38, 0x70, 0xD8, 0xD8, 0x70, 0x00, /*  */
    0x00, 0x68, 0x68, 0x68, 0x7C, 0xC0, /*  */
    0x00, 0xF8, 0x30, 0x30, 0x30, 0x20, /*  */
    0x70, 0x70, 0xA8, 0xA8, 0x70, 0x70, /*  */
    0x70, 0xD8, 0xF8, 0xD8, 0x70, 0x00, /*  */
    0x70, 0xD8, 0xD8, 0x50, 0xD8, 0x00, /*  */
    0x30, 0x68, 0x70, 0xD8, 0xD8, 0x70, /*  */
    0x18, 0x20, 0x70, 0xA8, 0x70, 0xC0, /*  */
    0x20, 0x70, 0xA8, 0xA8, 0x70, 0x20, /*  */
    0x38, 0x40, 0x78, 0x40, 0x38, 0x00, /*  */
    0x30, 0x48, 0x48, 0x48, 0x48, 0x00, /*  */
    0x78, 0x00, 0x78, 0x00, 0x78, 0x00, /*  */
    0x20, 0xF8, 0x20, 0x00, 0xF8, 0x00, /*  */
    0x60, 0x18, 0x60, 0x00, 0x78, 0x00, /*  */
    0x18, 0x60, 0x18, 0x00, 0x78, 0x00, /*  */
    0x0C, 0x10, 0x30, 0x30, 0x30, 0x30, /*  */
    0x30, 0x30, 0x30, 0x30, 0x20, 0xC0, /*  */
    0x20, 0x00, 0xF8, 0x00, 0x20, 0x00, /*  */
    0x68, 0xB0, 0x00, 0x68, 0xB0, 0x00, /*  */
    0x30, 0x48, 0x30, 0x00, 0x00, 0x00, /*  */
    0x30, 0x78, 0x30, 0x00, 0x00, 0x00, /*  */
    0x00, 0x00, 0x30, 0x30, 0x00, 0x00, /*  */
    0x00, 0x1C, 0x10, 0xD0, 0x70, 0x20, /*  */
    0x70, 0x68, 0x68, 0x68, 0x00, 0x00, /*  */
    0x70, 0x18, 0x30, 0x78, 0x00, 0x00, /*  */
    0x70, 0x30, 0x10, 0x70, 0x00, 0x00, /*  */
    0xF8, 0x00, 0x00, 0x00, 0x00, 0x00
};

OPM_FontStruct OPM_SmallFont =
{
    6, 6, (unsigned char*)&OPM_Font6pt
};

OPM_FontStruct OPM_MediumFont =
{
    8, 8, (unsigned char*)&OPM_Font8pt
};

OPM_FontStruct OPM_LargeFont =
{
    16, 8, (unsigned char*)&OPM_Font16pt
};

char* ASM_PixelMapBuffer;
unsigned int ASM_PixelMapStride;
unsigned int ASM_StringFontWidth;
unsigned int ASM_StringFontHeight;
unsigned int ASM_StringFontSize;
char* ASM_pFontBitmap;

static void OPM_LocalPrintError(char *buffer, const char *data);

static void ASM_DrawFilledRectangle(unsigned char *dst, unsigned char color, unsigned int stridediff, int width, int height);
static void ASM_DrawVerticalLine(unsigned char *dst, unsigned char color, int linelength, unsigned int stride);
static void ASM_DrawHorizontalLine(unsigned char *dst, unsigned char color, int linelength, unsigned int stride);
static void ASM_CopyRectangle(unsigned char *dst, unsigned char *src, unsigned int srcstridediff, unsigned int dststridediff, int width, int height);
static void ASM_CopyRectangleWithTransparency(unsigned char *dst, unsigned char *src, unsigned char transparent_color, unsigned int srcstridediff, unsigned int dststridediff, int width, int height);

int OPM_New(unsigned int width, unsigned int height, unsigned int bytes_per_pixel, OPM_Struct *pixel_map, unsigned char *buffer)
{
    unsigned int size;
    OPM_ErrorStruct data;

    pixel_map->flags = 0;
    pixel_map->view_x = 0;
    pixel_map->view_y = 0;

    size = width * height * bytes_per_pixel;
    pixel_map->size = size;
    if (buffer == NULL)
    {
        pixel_map->buffer = (unsigned char *)BASEMEM_Alloc(size, BASEMEM_XMS_MEMORY | BASEMEM_ZERO_MEMORY);

        if (pixel_map->buffer == NULL)
        {
            data.text = "OPM_New: Cannot Allocate Mem for PixelMap width,height";
            data.data1 = width;
            data.data2 = height;
            ERROR_PushError(OPM_LocalPrintError, "BBOPM Library", sizeof(data), (const char *) &data);

            return 0;
        }

        memset(pixel_map->buffer, 0, size);
        pixel_map->flags |= BBOPM_ALLOCATED_BUFFER;
    }
    else
    {
        pixel_map->buffer = buffer;
    }

    pixel_map->width = width;
    pixel_map->height = height;
    pixel_map->bytes_per_pixel = bytes_per_pixel;
    pixel_map->clip_x = 0;
    pixel_map->clip_y = 0;
    pixel_map->clip_width = width;
    pixel_map->clip_height = height;
    pixel_map->origin_x = 0;
    pixel_map->origin_y = 0;
    pixel_map->bytes_per_pixel2 = bytes_per_pixel;
    pixel_map->stride = width * bytes_per_pixel;
    pixel_map->flags |= BBOPM_UNKNOWN4 | BBOPM_MODIFIED;
    return 1;
}

void OPM_Del(OPM_Struct *pixel_map)
{
    if (!(pixel_map->flags & BBOPM_VIEW))
    {
        if (pixel_map->flags & BBOPM_ALLOCATED_BUFFER)
        {
            BASEMEM_Free(pixel_map->buffer);
        }
    }

    pixel_map->flags = 0;
}

void OPM_SetVirtualClipStart(OPM_Struct *view_pixel_map, int clip_x, int clip_y)
{
    OPM_Struct *base_pixel_map;
    int clip_width, clip_height;

    if (!(view_pixel_map->flags & BBOPM_VIEW)) return;

    base_pixel_map = view_pixel_map->base_pixel_map;
    clip_width = view_pixel_map->width;
    clip_height = view_pixel_map->height;

    if (clip_x < 0)
    {
        clip_width += clip_x;
        clip_x = 0;
    }

    if (clip_x + clip_width >= base_pixel_map->width)
    {
        clip_width = base_pixel_map->width - clip_x;
    }

    if (clip_y < 0)
    {
        clip_height += clip_y;
        clip_y = 0;
    }

    if (clip_y + clip_height >= base_pixel_map->height)
    {
        clip_height = base_pixel_map->height - clip_y;
    }

    view_pixel_map->clip_x = clip_x;
    view_pixel_map->clip_y = clip_y;
    view_pixel_map->clip_width = clip_width;
    view_pixel_map->clip_height = clip_height;

    view_pixel_map->buffer = base_pixel_map->buffer + view_pixel_map->stride * clip_y + clip_x;
}

void OPM_CreateVirtualOPM(OPM_Struct *base_pixel_map, OPM_Struct *view_pixel_map, int view_x, int view_y, int view_width, int view_height)
{
    view_pixel_map->flags = BBOPM_VIEW | BBOPM_UNKNOWN4 | BBOPM_MODIFIED;
    view_pixel_map->view_x = view_x;
    view_pixel_map->view_y = view_y;
    view_pixel_map->width = view_width;
    view_pixel_map->height = view_height;
    view_pixel_map->origin_x = 0;
    view_pixel_map->origin_y = 0;

    if (view_x < base_pixel_map->clip_x)
    {
        view_width -= base_pixel_map->clip_x - view_x;
        view_pixel_map->origin_x = -(base_pixel_map->clip_x - view_x);
        view_x = base_pixel_map->clip_x;
        if (view_width < 0)
        {
            view_width = 0;
        }
    }

    if (view_x + view_width > base_pixel_map->clip_x + base_pixel_map->clip_width)
    {
        view_width -= (view_x + view_width) - (base_pixel_map->clip_x + base_pixel_map->clip_width);
        if (view_width < 0)
        {
            view_width = 0;
            view_x = base_pixel_map->clip_x + base_pixel_map->clip_width;
        }
    }

    if (view_y < base_pixel_map->clip_y)
    {
        view_height -= base_pixel_map->clip_y - view_y;
        view_pixel_map->origin_y = -(base_pixel_map->clip_y - view_y);
        view_y = base_pixel_map->clip_y;
        if (view_height < 0)
        {
            view_height = 0;
        }
    }

    if (view_y + view_height > base_pixel_map->clip_y + base_pixel_map->clip_height)
    {
        view_height -= (view_y + view_height) - (base_pixel_map->clip_y + base_pixel_map->clip_height);
        if (view_height < 0)
        {
            view_height = 0;
            view_y = base_pixel_map->clip_y + base_pixel_map->clip_height;
        }
    }

    view_pixel_map->base_pixel_map = base_pixel_map;
    view_pixel_map->bytes_per_pixel = base_pixel_map->bytes_per_pixel;
    view_pixel_map->clip_x = 0;
    view_pixel_map->clip_y = 0;
    view_pixel_map->clip_width = view_width;
    view_pixel_map->clip_height = view_height;
    view_pixel_map->bytes_per_pixel2 = base_pixel_map->bytes_per_pixel;
    view_pixel_map->stride = base_pixel_map->stride;
    view_pixel_map->buffer = base_pixel_map->buffer + view_pixel_map->stride * view_y + view_x;
}

void OPM_SetPixel(OPM_Struct *pixel_map, int x, int y, unsigned char color)
{
    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if ((x >= pixel_map->clip_x) &&
        (x < pixel_map->clip_x + pixel_map->clip_width) &&
        (y >= pixel_map->clip_y) &&
        (y < pixel_map->clip_y + pixel_map->clip_height)
       )
    {
        pixel_map->flags |= BBOPM_MODIFIED;
        pixel_map->buffer[y * pixel_map->stride + x] = color;
    }
}

unsigned char OPM_GetPixel(OPM_Struct *pixel_map, int x, int y)
{
    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if ((x >= pixel_map->clip_x) &&
        (x < pixel_map->clip_x + pixel_map->clip_width) &&
        (y >= pixel_map->clip_y) &&
        (y < pixel_map->clip_y + pixel_map->clip_height)
       )
    {
        return pixel_map->buffer[y * pixel_map->stride + x];
    }
    else
    {
        return 0;
    }
}

void OPM_HorLine(OPM_Struct *pixel_map, int x, int y, int length, unsigned char color)
{
    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if (y < pixel_map->clip_y) return;
    if (y >= pixel_map->clip_y + pixel_map->clip_height) return;

    if (x < pixel_map->clip_x)
    {
        length -= pixel_map->clip_x - x;
        x = pixel_map->clip_x;
        if (length <= 0) return;
    }

    if (x + length > pixel_map->clip_x + pixel_map->clip_width)
    {
        length -= (x + length) - (pixel_map->clip_x + pixel_map->clip_width);
        if (length <= 0) return;
    }

    ASM_DrawHorizontalLine(pixel_map->buffer + y * pixel_map->stride + x, color, length, pixel_map->stride);
    pixel_map->flags |= BBOPM_MODIFIED;
}

void OPM_VerLine(OPM_Struct *pixel_map, int x, int y, int length, unsigned char color)
{
    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if (x < pixel_map->clip_x) return;
    if (x >= pixel_map->clip_x + pixel_map->clip_width) return;

    if (y < pixel_map->clip_y)
    {
        length -= pixel_map->clip_y - y;
        y = pixel_map->clip_y;
        if (length <= 0) return;
    }

    if (y + length > pixel_map->clip_y + pixel_map->clip_height)
    {
        length -= (y + length) - (pixel_map->clip_y + pixel_map->clip_height);
        if (length <= 0) return;
    }

    ASM_DrawVerticalLine(pixel_map->buffer + y * pixel_map->stride + x, color, length, pixel_map->stride);
    pixel_map->flags |= BBOPM_MODIFIED;
}

void OPM_Box(OPM_Struct *pixel_map, int x, int y, int width, int height, unsigned char color)
{
    int draw_left_line, draw_right_line, draw_top_line, draw_bottom_line;

    draw_left_line = draw_right_line = draw_top_line = draw_bottom_line = 1;

    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if (x < pixel_map->clip_x)
    {
        width -= pixel_map->clip_x - x;
        x = pixel_map->clip_x;
        draw_left_line = 0;
        if (width <= 0) return;
    }

    if (x + width > pixel_map->clip_x + pixel_map->clip_width)
    {
        width -= (x + width) - (pixel_map->clip_x + pixel_map->clip_width);
        draw_right_line = 0;
        if (width <= 0) return;
    }

    if (y < pixel_map->clip_y)
    {
        height -= pixel_map->clip_y - y;
        y = pixel_map->clip_y;
        draw_top_line = 0;
        if (height <= 0) return;
    }

    if (y + height > pixel_map->clip_y + pixel_map->clip_height)
    {
        height -= (y + height) - (pixel_map->clip_y + pixel_map->clip_height);
        draw_bottom_line = 0;
        if (height <= 0) return;
    }

    if (draw_left_line)
    {
        ASM_DrawVerticalLine(pixel_map->buffer + y * pixel_map->stride + x, color, height, pixel_map->stride);
    }
    if (draw_right_line)
    {
        ASM_DrawVerticalLine(pixel_map->buffer + y * pixel_map->stride + x + width - 1, color, height, pixel_map->stride);
    }
    if (draw_top_line)
    {
        ASM_DrawHorizontalLine(pixel_map->buffer + y * pixel_map->stride + x, color, width, pixel_map->stride);
    }
    if (draw_bottom_line)
    {
        ASM_DrawHorizontalLine(pixel_map->buffer + (y + height - 1) * pixel_map->stride + x, color, width, pixel_map->stride);
    }
    pixel_map->flags |= BBOPM_MODIFIED;
}

void OPM_FillBox(OPM_Struct *pixel_map, int x, int y, int width, int height, uint8_t color)
{
    x += pixel_map->origin_x;
    y += pixel_map->origin_y;

    if (x < pixel_map->clip_x)
    {
        width -= pixel_map->clip_x - x;
        x = pixel_map->clip_x;
        if (width <= 0) return;
    }

    if (x + width > pixel_map->clip_x + pixel_map->clip_width)
    {
        width -= (x + width) - (pixel_map->clip_x + pixel_map->clip_width);
        if (width <= 0) return;
    }

    if (y < pixel_map->clip_y)
    {
        height -= pixel_map->clip_y - y;
        y = pixel_map->clip_y;
        if (height <= 0) return;
    }

    if (y + height > pixel_map->clip_y + pixel_map->clip_height)
    {
        height -= (y + height) - (pixel_map->clip_y + pixel_map->clip_height);
        if (height <= 0) return;
    }

    ASM_DrawFilledRectangle(pixel_map->buffer + y * pixel_map->stride + x, color, pixel_map->stride - width, width, height);
    pixel_map->flags |= BBOPM_MODIFIED;
}

void  OPM_CopyGFXOPM(OPM_Struct *a1, OPM_Struct *a2, int a3, int a4, int a5)
{
    /* TODO: Implement function */
}

void OPM_CopyOPMOPM(OPM_Struct *src_pixel_map, OPM_Struct *dst_pixel_map, int src_x, int src_y, int src_width, int src_height, int dst_x, int dst_y)
{
    int clip_x, clip_y, clip_endx, clip_endy, add_x, add_y;
    unsigned char *src, *dst;

    src_x += src_pixel_map->origin_x;
    src_y += src_pixel_map->origin_y;
    dst_x += dst_pixel_map->origin_x;
    dst_y += dst_pixel_map->origin_y;

    clip_x = src_pixel_map->clip_x;
    clip_y = src_pixel_map->clip_y;
    clip_endx = clip_x + src_pixel_map->clip_width;
    clip_endy = clip_y + src_pixel_map->clip_height;

    add_x = 0;
    add_y = 0;

    if (src_x < clip_x)
    {
        if (clip_x - src_x > src_width) return;
        src_width -= clip_x - src_x;
        if (src_width <= 0) return;
        add_x += clip_x - src_x;
        src_x = clip_x;
    }

    if (src_y < clip_y)
    {
        if (clip_y - src_y > src_height) return;
        src_height -= clip_y - src_y;
        if (src_height <= 0) return;
        add_y += clip_y - src_y;
        src_y = clip_y;
    }

    if (src_x + src_width > clip_endx)
    {
        if (src_x > clip_endx) return;
        src_width -= (src_x + src_width) - clip_endx;
        if (src_width <= 0) return;
    }

    if (src_y + src_height > clip_endy)
    {
        if (src_y > clip_endy) return;
        src_height -= (src_y + src_height) - clip_endy;
        if (src_height <= 0) return;
    }

    dst_x += add_x;
    dst_y += add_y;

    clip_x = dst_pixel_map->clip_x;
    clip_y = dst_pixel_map->clip_y;
    clip_endx = clip_x + dst_pixel_map->clip_width;
    clip_endy = clip_y + dst_pixel_map->clip_height;

    add_x = 0;
    add_y = 0;

    if (dst_x < clip_x)
    {
        if (clip_x - dst_x > src_width) return;
        src_width -= clip_x - dst_x;
        if (src_width <= 0) return;
        add_x += clip_x - dst_x;
        dst_x = clip_x;
    }

    if (dst_y < clip_y)
    {
        if (clip_y - dst_y > src_height) return;
        src_height -= clip_y - dst_y;
        if (src_height <= 0) return;
        add_y += clip_y - dst_y;
        dst_y = clip_y;
    }

    if (dst_x + src_width > clip_endx)
    {
        if (dst_x > clip_endx) return;
        src_width -= (dst_x + src_width) - clip_endx;
        if (src_width <= 0) return;
    }

    if (dst_y + src_height > clip_endy)
    {
        if (dst_y > clip_endy) return;
        src_height -= (dst_y + src_height) - clip_endy;
        if (src_height <= 0) return;
    }

    src_x += add_x;
    src_y += add_y;

    src = src_pixel_map->buffer + src_pixel_map->stride * src_y + src_x;
    dst = dst_pixel_map->buffer + dst_pixel_map->stride * dst_y + dst_x;

    if (src_pixel_map->flags & BBOPM_TRANSPARENCY)
    {
        ASM_CopyRectangleWithTransparency(dst, src, src_pixel_map->transparent_color, src_pixel_map->stride - src_width, dst_pixel_map->stride - src_width, src_width, src_height);
    }
    else
    {
        ASM_CopyRectangle(dst, src, src_pixel_map->stride - src_width, dst_pixel_map->stride - src_width, src_width, src_height);
    }
    dst_pixel_map->flags |= BBOPM_MODIFIED;
}

void OPM_DrawString(OPM_Struct *pixel_map, char *string, int x, int y, unsigned char color)
{
    ASM_SetFontOptions(0, 0, pixel_map->width, pixel_map->height, (char*)pixel_map->buffer, pixel_map->stride);
    ASM_DrawString(x, y, color, 8, (char*)&string[0]);
}

void OPM_drawStringWithFormat(OPM_Struct *pixel_map, __int16 x, __int16 y, unsigned __int8 letter, const char *format, ...)
{

}

void OPM_sub_20BD1(OPM_Struct *pixel_map, int a2)
{

}

void OPM_sub_20C65(OPM_Struct *pixel_map1, OPM_Struct *pixel_map2, int a3, int a4, int a5, int a6)
{

}

static void OPM_LocalPrintError(char *buffer, const char *data)
{
#define DATA (((OPM_ErrorStruct *)data))
    sprintf(buffer, "ERROR!: %s  %ld, %ld", DATA->text, (long int)DATA->data1, (long int)DATA->data2);
#undef DATA
}

static void ASM_DrawFilledRectangle(unsigned char *dst, unsigned char color, unsigned int stridediff, int width, int height)
{
    int count;

    if (width >= 8)
    {
        do
        {
            memset(dst, color, width);
            dst += width;
            dst += stridediff;
            height--;
        } while (height > 0);
    }
    else
    {
        do
        {

            for (count = width; count != 0; count--)
            {
                *dst = color;
                dst++;
            }
            dst += stridediff;
            height--;
        } while (height > 0);
    }
}

static void ASM_DrawVerticalLine(unsigned char *dst, unsigned char color, int linelength, unsigned int stride)
{
    for (; linelength != 0; linelength--)
    {
        *dst = color;
        dst += stride;
    }
}

static void ASM_DrawHorizontalLine(unsigned char *dst, unsigned char color, int linelength, unsigned int stride)
{
    if (linelength >= 12)
    {
        memset(dst, color, linelength);
    }
    else
    {
        for (; linelength != 0; linelength--)
        {
            *dst = color;
            dst++;
        }
    }
}

static void ASM_CopyRectangle(unsigned char *dst, unsigned char *src, unsigned int srcstridediff, unsigned int dststridediff, int width, int height)
{
    int count;
    if (width >= 8)
    {
        do
        {
            memcpy(dst, src, width);
            src += width;
            dst += width;
            src += srcstridediff;
            dst += dststridediff;
            height--;
        } while (height > 0);
    }
    else
    {
        do
        {
            for (count = width; count != 0; count--)
            {
                *dst = *src;
                src++;
                dst++;
            }
            src += srcstridediff;
            dst += dststridediff;
            height--;
        } while (height > 0);
    }
}

static void ASM_CopyRectangleWithTransparency(unsigned char *dst, unsigned char *src, unsigned char transparent_color, unsigned int srcstridediff, unsigned int dststridediff, int width, int height)
{
    unsigned char value;
    int count;

    do
    {
        for (count = width; count != 0; count--)
        {

            value = *src;
            if (value != transparent_color)
            {
                *dst = value;
            }
            src++;
            dst++;
        }
        src += srcstridediff;
        dst += dststridediff;
        height--;
    } while (height > 0);
}

void ASM_CopyCursorWithTransparency(unsigned char* old_buffer, unsigned char* new_buffer, unsigned char* mouse_cursor, unsigned char transparent_color, unsigned int length)
{
    unsigned char value;

    do
    {
        value = *new_buffer;
        if (*mouse_cursor != transparent_color)
        {
            *new_buffer = *mouse_cursor;
        }
        *old_buffer = value;
        ++new_buffer;
        ++old_buffer;
        ++mouse_cursor;
        length--;
    }
    while (length > 0);
}

void ASM_SetFontOptions(int unk1, int unk2, int width, int height, char *buffer, int stride)
{
    ASM_PixelMapBuffer = buffer;
    ASM_StringFontWidth = width;
    ASM_StringFontHeight = height;
    ASM_PixelMapStride = stride;
}

void ASM_DrawString(int x, int y, int color, int font, char *string)
{
    OPM_FontStruct *pFont;
    int ascii_index;
    
    pFont = (OPM_FontStruct *)&OPM_MediumFont; /* TODO: Implement font selection */
    ASM_StringFontWidth = pFont->width;
    ASM_StringFontHeight = pFont->height;
    ASM_StringFontSize = ASM_StringFontHeight * ((ASM_StringFontWidth + 7) >> 3);
    ASM_pFontBitmap = (char *)pFont->bitmap;
    
    while ( 1 )
    {
        ascii_index = *string;
        if ( !ascii_index )
        {
            break;
        }
        
        ASM_DrawCharFromBitmap(color, x, y, ASM_StringFontWidth, ASM_StringFontHeight, (char*)&ASM_pFontBitmap[ASM_StringFontSize * ascii_index]);
        *string++;
        x += ASM_StringFontWidth;
    }
}

void ASM_DrawCharFromBitmap(char color, int x, int y, int font_height, int font_width, char *bitmap_offset)
{
    char* pixel_location = &ASM_PixelMapBuffer[x + ASM_PixelMapStride * y];
    ASM_StringFontWidth = font_width;
    ASM_StringFontHeight = font_height;

    for (int i = ASM_StringFontHeight; i > 0; i--)
    {
        if (*bitmap_offset & 0x80)
        {
            pixel_location[0] = color;
        }

        if (*bitmap_offset & 0x40)
        {
            pixel_location[1] = color;
        }

        if (*bitmap_offset & 0x20)
        {
            pixel_location[2] = color;
        }

        if (*bitmap_offset & 0x10)
        {
            pixel_location[3] = color;
        }

        if (*bitmap_offset & 0x08)
        {
            pixel_location[4] = color;
        }

        if (*bitmap_offset & 0x04)
        {
            pixel_location[5] = color;
        }

        if (*bitmap_offset & 0x02)
        {
            pixel_location[6] = color;
        }

        if (*bitmap_offset & 0x01)
        {
            pixel_location[7] = color;
        }

        *bitmap_offset++;
        pixel_location += ASM_PixelMapStride;
    }
    pixel_location += 8;
}